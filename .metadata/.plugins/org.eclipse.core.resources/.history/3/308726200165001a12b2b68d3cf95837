package com.example.demo.Controller;

import java.io.IOException;
import java.util.Map;
import java.util.UUID;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;


import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.servlet.support.ServletUriComponentsBuilder;

import com.example.demo.Dao.UserRepository;

import org.json.JSONObject;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.RestController;

@RestController
@RequestMapping("/auth")
public class AuthController {
	
	    @Autowired
	    private AuthenticationManager authenticationManager;
	
	    @Autowired
	    private UserRepository userRepository;
	
	    @Autowired
	    private PasswordEncoder passwordEncoder;
	
	    @Autowired
	    private TokenProvider tokenProvider;
		
		@RequestMapping(value = "/google")
		@ResponseBody
		public static Object Login(HttpServletRequest request) {
			
	        Authentication authentication = authenticationManager.authenticate(
	                new UsernamePasswordAuthenticationToken(
	                        loginRequest.getEmail(),
	                        loginRequest.getPassword()
	                )
	        );

	        SecurityContextHolder.getContext().setAuthentication(authentication);

	        String token = tokenProvider.createToken(authentication);
	        return ResponseEntity.ok(new AuthResponse(token));
		}
	
	  @RequestMapping(value = "/facebookredir")
	  public void facebookredirect(HttpServletResponse res) throws IOException {
	    
		  //查看回傳的id有無在資料庫
		  //
		  //假設 有 轉址登入後畫面		  
	  }
	  
	  @RequestMapping(value = "/googleredir")
	  public void googleredirect(HttpServletResponse res) throws IOException {
	    
			// 隨機字串，防止csrf攻擊
			String state = UUID.randomUUID() + "";
			Map<String, String> params = new HashMap<String, String>();
			params.put("client_id", client_id);
			params.put("redirect_uri", redirect_url);
			params.put("response_type", "code");
			params.put("scope", scope);
			params.put("access_type", "offline");
			params.put("state", state);
			params.put("include_granted_scopes", "true");
			String url = HttpClientUtil.getUrl(code_url, params);
			response.sendRedirect(url);
		  //查看回傳的id有無在資料庫
		  //
		  //假設 有 轉址登入後畫面		  
	  }
	  
	  @RequestMapping(value = "/githubredir")
	  public void githubredirect(HttpServletResponse res) throws IOException {
	    
		  //查看回傳的id有無在資料庫
		  //
		  //假設 有 轉址登入後畫面		  
	  }
}
